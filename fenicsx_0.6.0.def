Bootstrap: docker
From: ubuntu:latest

%files

%environment
    export OMPI_DIR=/opt/ompi
    export SINGULARITY_OMPI_DIR=$OMPI_DIR
    export SINGULARITYENV_APPEND_PATH=$OMPI_DIR/bin
    export SINGULARITYENV_APPEND_LD_LIBRARY_PATH=$OMPI_DIR/lib

%post
    export DEBIAN_FRONTEND=noninteractive
    export TZ=America/Denver
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    echo "Installing required packages..."
    apt-get update && apt-get install -y wget git bash gcc gfortran g++ make file bzip2 libpmi2-0 libpmi0 libpmix2 libpmix-dev libpmi2-0-dev libpmi0-dev python-is-python3 zlib1g-dev libhwloc-dev libevent-dev libmkl-dev libjpeg9 flex

    echo "Installing Open MPI"
    export OMPI_DIR=/opt/ompi
    export OMPI_VERSION=4.1.4
    export OMPI_URL="https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OMPI_VERSION}.tar.bz2"
    mkdir -p /tmp/ompi
    mkdir -p /opt
    # Download
    cd /tmp/ompi && wget -O openmpi-$OMPI_VERSION.tar.bz2 $OMPI_URL && tar -xjf openmpi-$OMPI_VERSION.tar.bz2
    # Compile and install
    cd /tmp/ompi/openmpi-$OMPI_VERSION && ./configure --prefix=$OMPI_DIR --with-pmi  --enable-shared --enable-mpi-cxx  --enable-mpi-fortran=all --with-hwloc=internal --with-libevent=internal && make install
    # Set env variables so we can compile our application
    export PATH=$OMPI_DIR/bin:$PATH
    export LD_LIBRARY_PATH=$OMPI_DIR/lib:$LD_LIBRARY_PATH
    export MANPATH=$OMPI_DIR/share/man:$MANPATH

    apt-get install -y libboost-all-dev libpugixml-dev libopenblas-dev cmake python3-pip

    echo "Installing MPI-enabled HDF5"
    export CC=mpicc
    export MPICC=$(which mpicc)
    export CXX=mpicxx
    export FC=mpif90
    cd /opt
    wget https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-1_12_3.tar.gz
    tar -xf hdf5-1_12_3.tar.gz
    cd hdf5-hdf5-1_12_3
    ./configure --enable-shared --enable-parallel && make && make install
     
    export LD_LIBRARY_PATH=/opt/hdf5-hdf5-1_12_3/lib:$LD_LIBRARY_PATH
    export CPATH=/opt/hdf5-hdf5-1_12_3/include:$CPATH
    export HDF5_ROOT=/opt/hdf5-hdf5-1_12_3
    export HDF5_LIBRARIES=/opt/hdf5-hdf5-1_12_3/lib
    export HDF5_INCLUDE_DIR=/opt/hdf5-hdf5-1_12_3/include

    echo "Installing BASIX"    
    cd /opt
    wget https://github.com/FEniCS/basix/archive/refs/tags/v0.6.0.tar.gz
    tar -xf v0.6.0.tar.gz
    cd basix-0.6.0/cpp
    cmake -DCMAKE_BUILD_TYPE=Release  -B build-dir -S .
    cmake --build build-dir
    cmake --install build-dir

    echo "Installing basix python interface"
    cd ../python
    pip install .

    echo "Install FFCx"
    cd /opt
    mkdir -p ffcx && cd ffcx
    wget https://github.com/FEniCS/ffcx/archive/refs/tags/v0.6.0.tar.gz
    tar -xf v0.6.0.tar.gz
    cd ffcx-0.6.0/

    cmake -B build-dir -S cmake/
    cmake --build build-dir
    cmake --install build-dir
    pip install .

    cd /opt
    wget https://web.cels.anl.gov/projects/petsc/download/release-snapshots/petsc-3.20.1.tar.gz
    tar -xf petsc-3.20.1.tar.gz
    cd petsc-3.20.1
    export PETSC_DIR=/opt/petsc-3.20.1
    export PETSC_ARCH=arch-linux-c 

    ./configure --with-cc=mpicc --with-cxx=mpicxx --with-fc=mpif90 --download-parmetis=1  --download-metis=1 --with-debugging=no  --download-ptscotch --download-suitesparse --download-mumps --download-hypre --download-scalapack --download-bison
    make PETSC_DIR=/opt/petsc-3.20.1 PETSC_ARCH=arch-linux-c all  

    export PYTHONPATH=/opt/petsc-3.20.1/arch-linux-c/lib:$PYTHONPATH

    pip install --upgrade pip setuptools wheel
    pip install pybind11
    export CC=$(which mpicc)
    pip install mpi4py petsc4py

    echo "Building c++ core"
    cd /opt
    mkdir -p dolfinx && cd dolfinx 
     wget https://github.com/FEniCS/dolfinx/archive/refs/tags/v0.6.0.tar.gz 
    VERSION=0.6.0 
    tar -xf v$VERSION.tar.gz 
    cd dolfinx-${VERSION}
    export DOLFINX_DIR=$PWD
    cd cpp
    mkdir -p build && cd build
    cmake ..
    make && make install
    cd ${DOLFINX_DIR}/python    
    
    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    export PATH=/usr/local/bin:$PATH
    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
    pip install --use-pep517 --check-build-dependencies --no-build-isolation .

    apt autoremove
    apt clean
    echo -e "source  /usr/local/lib/dolfinx/dolfinx.conf\n" >> ~/.bashrc
   

%runscript
    export PATH=$OMPI_DIR/bin:/usr/local/bin:$PATH
    export LD_LIBRARY_PATH=$OMPI_DIR/lib:/usr/local/lib:$LD_LIBRARY_PATH
    export MANPATH=$OMPI_DIR/share/man:$MANPATH
    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
    export PYTHONPATH=/opt/petsc-3.20.1/arch-linux-c/lib:$PYTHONPATH

    exec "$@"

